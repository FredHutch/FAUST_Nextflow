// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// addNoiseToDataVector
std::vector<double> addNoiseToDataVector(const std::vector<double>& dataVector, double scaleGaussian, unsigned long long rSeed);
RcppExport SEXP _faust_addNoiseToDataVector(SEXP dataVectorSEXP, SEXP scaleGaussianSEXP, SEXP rSeedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type dataVector(dataVectorSEXP);
    Rcpp::traits::input_parameter< double >::type scaleGaussian(scaleGaussianSEXP);
    Rcpp::traits::input_parameter< unsigned long long >::type rSeed(rSeedSEXP);
    rcpp_result_gen = Rcpp::wrap(addNoiseToDataVector(dataVector, scaleGaussian, rSeed));
    return rcpp_result_gen;
END_RCPP
}
// cppGrowAnnotationForest
Rcpp::List cppGrowAnnotationForest(Rcpp::NumericMatrix& rawDataMatrix, double dipT, int clusterLB, bool repeatsAllowed, int maxSearchDepth, unsigned long long maxClusterNum, bool verboseForestRun, unsigned long long maxNumberOfGates, bool randomSearch, int numThreadsRequested, bool useRestrictedValue, Rcpp::NumericMatrix& restrictedValueMatrix, int numGateUB, double maxSearchTime, double gaussianScale, unsigned long long randomSeed, unsigned long subSampleThreshold, unsigned long subSampleSize, unsigned long subSampleIterations, bool recordCounts, bool recordIndices);
RcppExport SEXP _faust_cppGrowAnnotationForest(SEXP rawDataMatrixSEXP, SEXP dipTSEXP, SEXP clusterLBSEXP, SEXP repeatsAllowedSEXP, SEXP maxSearchDepthSEXP, SEXP maxClusterNumSEXP, SEXP verboseForestRunSEXP, SEXP maxNumberOfGatesSEXP, SEXP randomSearchSEXP, SEXP numThreadsRequestedSEXP, SEXP useRestrictedValueSEXP, SEXP restrictedValueMatrixSEXP, SEXP numGateUBSEXP, SEXP maxSearchTimeSEXP, SEXP gaussianScaleSEXP, SEXP randomSeedSEXP, SEXP subSampleThresholdSEXP, SEXP subSampleSizeSEXP, SEXP subSampleIterationsSEXP, SEXP recordCountsSEXP, SEXP recordIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type rawDataMatrix(rawDataMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type dipT(dipTSEXP);
    Rcpp::traits::input_parameter< int >::type clusterLB(clusterLBSEXP);
    Rcpp::traits::input_parameter< bool >::type repeatsAllowed(repeatsAllowedSEXP);
    Rcpp::traits::input_parameter< int >::type maxSearchDepth(maxSearchDepthSEXP);
    Rcpp::traits::input_parameter< unsigned long long >::type maxClusterNum(maxClusterNumSEXP);
    Rcpp::traits::input_parameter< bool >::type verboseForestRun(verboseForestRunSEXP);
    Rcpp::traits::input_parameter< unsigned long long >::type maxNumberOfGates(maxNumberOfGatesSEXP);
    Rcpp::traits::input_parameter< bool >::type randomSearch(randomSearchSEXP);
    Rcpp::traits::input_parameter< int >::type numThreadsRequested(numThreadsRequestedSEXP);
    Rcpp::traits::input_parameter< bool >::type useRestrictedValue(useRestrictedValueSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type restrictedValueMatrix(restrictedValueMatrixSEXP);
    Rcpp::traits::input_parameter< int >::type numGateUB(numGateUBSEXP);
    Rcpp::traits::input_parameter< double >::type maxSearchTime(maxSearchTimeSEXP);
    Rcpp::traits::input_parameter< double >::type gaussianScale(gaussianScaleSEXP);
    Rcpp::traits::input_parameter< unsigned long long >::type randomSeed(randomSeedSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type subSampleThreshold(subSampleThresholdSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type subSampleSize(subSampleSizeSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type subSampleIterations(subSampleIterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type recordCounts(recordCountsSEXP);
    Rcpp::traits::input_parameter< bool >::type recordIndices(recordIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cppGrowAnnotationForest(rawDataMatrix, dipT, clusterLB, repeatsAllowed, maxSearchDepth, maxClusterNum, verboseForestRun, maxNumberOfGates, randomSearch, numThreadsRequested, useRestrictedValue, restrictedValueMatrix, numGateUB, maxSearchTime, gaussianScale, randomSeed, subSampleThreshold, subSampleSize, subSampleIterations, recordCounts, recordIndices));
    return rcpp_result_gen;
END_RCPP
}
// doubleDip
double doubleDip(const std::vector<double>& x);
RcppExport SEXP _faust_doubleDip(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(doubleDip(x));
    return rcpp_result_gen;
END_RCPP
}
// gateSample
StringVector gateSample(NumericMatrix annotationMatrix, StringVector selectedChannels, NumericVector gateNums, StringVector scampCellPops);
RcppExport SEXP _faust_gateSample(SEXP annotationMatrixSEXP, SEXP selectedChannelsSEXP, SEXP gateNumsSEXP, SEXP scampCellPopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type annotationMatrix(annotationMatrixSEXP);
    Rcpp::traits::input_parameter< StringVector >::type selectedChannels(selectedChannelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gateNums(gateNumsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type scampCellPops(scampCellPopsSEXP);
    rcpp_result_gen = Rcpp::wrap(gateSample(annotationMatrix, selectedChannels, gateNums, scampCellPops));
    return rcpp_result_gen;
END_RCPP
}
// getAnnotationStats
Rcpp::List getAnnotationStats(std::vector<std::string> filePaths, std::vector<int> requestedLookup, int minClusterSize, double minProportion, int numThreadsToUse);
RcppExport SEXP _faust_getAnnotationStats(SEXP filePathsSEXP, SEXP requestedLookupSEXP, SEXP minClusterSizeSEXP, SEXP minProportionSEXP, SEXP numThreadsToUseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filePaths(filePathsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type requestedLookup(requestedLookupSEXP);
    Rcpp::traits::input_parameter< int >::type minClusterSize(minClusterSizeSEXP);
    Rcpp::traits::input_parameter< double >::type minProportion(minProportionSEXP);
    Rcpp::traits::input_parameter< int >::type numThreadsToUse(numThreadsToUseSEXP);
    rcpp_result_gen = Rcpp::wrap(getAnnotationStats(filePaths, requestedLookup, minClusterSize, minProportion, numThreadsToUse));
    return rcpp_result_gen;
END_RCPP
}
// getCountMatrix
Rcpp::IntegerMatrix getCountMatrix(std::vector<std::string> annotationFilePaths, std::vector<std::string> reportingFilePaths, std::vector<std::string> sampleNames, std::vector<int> lookupOrder, std::vector<std::string> lookupNames, int minClusterSize, double minProportion, int numThreadsToUse);
RcppExport SEXP _faust_getCountMatrix(SEXP annotationFilePathsSEXP, SEXP reportingFilePathsSEXP, SEXP sampleNamesSEXP, SEXP lookupOrderSEXP, SEXP lookupNamesSEXP, SEXP minClusterSizeSEXP, SEXP minProportionSEXP, SEXP numThreadsToUseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type annotationFilePaths(annotationFilePathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type reportingFilePaths(reportingFilePathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sampleNames(sampleNamesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lookupOrder(lookupOrderSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type lookupNames(lookupNamesSEXP);
    Rcpp::traits::input_parameter< int >::type minClusterSize(minClusterSizeSEXP);
    Rcpp::traits::input_parameter< double >::type minProportion(minProportionSEXP);
    Rcpp::traits::input_parameter< int >::type numThreadsToUse(numThreadsToUseSEXP);
    rcpp_result_gen = Rcpp::wrap(getCountMatrix(annotationFilePaths, reportingFilePaths, sampleNames, lookupOrder, lookupNames, minClusterSize, minProportion, numThreadsToUse));
    return rcpp_result_gen;
END_RCPP
}
// getTautStringApprox
Rcpp::List getTautStringApprox(std::vector<double> dataVec);
RcppExport SEXP _faust_getTautStringApprox(SEXP dataVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type dataVec(dataVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getTautStringApprox(dataVec));
    return rcpp_result_gen;
END_RCPP
}
// labelPartition
std::vector<std::string> labelPartition(const Rcpp::NumericMatrix& partitionScores, const std::vector<std::string>& colNames, const std::vector<int>& colScoreRange);
RcppExport SEXP _faust_labelPartition(SEXP partitionScoresSEXP, SEXP colNamesSEXP, SEXP colScoreRangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type partitionScores(partitionScoresSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type colNames(colNamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type colScoreRange(colScoreRangeSEXP);
    rcpp_result_gen = Rcpp::wrap(labelPartition(partitionScores, colNames, colScoreRange));
    return rcpp_result_gen;
END_RCPP
}
// mkSessionAnnMat
void mkSessionAnnMat(std::string expMatFP, std::string newAMFP, Rcpp::List cpList);
RcppExport SEXP _faust_mkSessionAnnMat(SEXP expMatFPSEXP, SEXP newAMFPSEXP, SEXP cpListSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type expMatFP(expMatFPSEXP);
    Rcpp::traits::input_parameter< std::string >::type newAMFP(newAMFPSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cpList(cpListSEXP);
    mkSessionAnnMat(expMatFP, newAMFP, cpList);
    return R_NilValue;
END_RCPP
}
// singleDip
double singleDip(const std::vector<double>& x);
RcppExport SEXP _faust_singleDip(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(singleDip(x));
    return rcpp_result_gen;
END_RCPP
}
// subsampleTest
std::vector<double> subsampleTest(const std::vector<double>& sortedData, unsigned long subSampleSize, unsigned long subSampleIterations);
RcppExport SEXP _faust_subsampleTest(SEXP sortedDataSEXP, SEXP subSampleSizeSEXP, SEXP subSampleIterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sortedData(sortedDataSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type subSampleSize(subSampleSizeSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type subSampleIterations(subSampleIterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(subsampleTest(sortedData, subSampleSize, subSampleIterations));
    return rcpp_result_gen;
END_RCPP
}
// tripleDip
double tripleDip(const std::vector<double>& x);
RcppExport SEXP _faust_tripleDip(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tripleDip(x));
    return rcpp_result_gen;
END_RCPP
}
// tsGates
std::vector<double> tsGates(const std::vector<double>& xVec, int modePrior);
RcppExport SEXP _faust_tsGates(SEXP xVecSEXP, SEXP modePriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type xVec(xVecSEXP);
    Rcpp::traits::input_parameter< int >::type modePrior(modePriorSEXP);
    rcpp_result_gen = Rcpp::wrap(tsGates(xVec, modePrior));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_faust_addNoiseToDataVector", (DL_FUNC) &_faust_addNoiseToDataVector, 3},
    {"_faust_cppGrowAnnotationForest", (DL_FUNC) &_faust_cppGrowAnnotationForest, 21},
    {"_faust_doubleDip", (DL_FUNC) &_faust_doubleDip, 1},
    {"_faust_gateSample", (DL_FUNC) &_faust_gateSample, 4},
    {"_faust_getAnnotationStats", (DL_FUNC) &_faust_getAnnotationStats, 5},
    {"_faust_getCountMatrix", (DL_FUNC) &_faust_getCountMatrix, 8},
    {"_faust_getTautStringApprox", (DL_FUNC) &_faust_getTautStringApprox, 1},
    {"_faust_labelPartition", (DL_FUNC) &_faust_labelPartition, 3},
    {"_faust_mkSessionAnnMat", (DL_FUNC) &_faust_mkSessionAnnMat, 3},
    {"_faust_singleDip", (DL_FUNC) &_faust_singleDip, 1},
    {"_faust_subsampleTest", (DL_FUNC) &_faust_subsampleTest, 3},
    {"_faust_tripleDip", (DL_FUNC) &_faust_tripleDip, 1},
    {"_faust_tsGates", (DL_FUNC) &_faust_tsGates, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_faust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
